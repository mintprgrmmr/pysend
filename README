## О проекте
Простая реализация клиента и сервера на Python для передачи файла по TCP.  Сервер принимает соединение, сохраняет файл и отправляет подтверждение. Клиент подключается, отправляет файл и ждёт ответ от сервера.

## Реализация
- TCP клиент и сервер для передачи файлов.
- Bash-скрипт для генерации тестовых данных и проверки результата.
- Обработка ошибок (OSError, ConnectionRefusedError, FileNotFoundError), type hints (mypy).
- Логирование шагов работы с единообразными сообщениями.
- Файлы клиента и сервера разделены по папкам (`src/` для кода, `test/` для тестовых файлов).

## Запуск
1. Создать и активировать виртуальное окружение (по желанию):
   ```bash
   python3 -m venv venv
   source venv/bin/activate
2. Запустить тестовый скрипт обязательно из корня:
    ```bash
    ./test.sh
    ```
Скрипт:
- создаст каталоги test/data/source и test/data/saved;
- сгенерирует бинарный файл source.bin (2 MB случайных байт);
- запустит сервер и клиента;
- сравнит исходный и полученный файлы.

Если всё успешно: [TEST] OK: файлы совпадают.

## Возможные улучшения
В рамках задания реализована только базовая логика с целью сохранения простоты кода.
Можно было бы добавить:
- вывод статистики (количество пакетов, размер переданных данных);
- обработку нескольких клиентов одновременно;
- проверку размера файла перед отправкой.

## Источники

[TCP-ССЫЛКИ] В процессе работы использовалась официальная документация и материалы для изучения:

TCP socket:
- [Python docs — socket HOWTO](https://docs.python.org/3/howto/sockets.html)
- [GeeksForGeeks — Socket Programming in Python](https://www.geeksforgeeks.org/python/socket-programming-python/)
- [Python docs — Socket reference](https://docs.python.org/3/library/socket.html)
- [Real Python — Socket Programming in Python](https://realpython.com/python-sockets/)
- [Metanit — Сокеты. Создание сервера] (https://metanit.com/python/network/1.2.php)
- [YouTube — File Transfer using TCP Socket in Python | Socket Programming ](https://www.youtube.com/watch?v=MEcL0-3k-2c)